hljs.registerLanguage("cobol",function(e){var n="[a-zA-Z_$][a-zA-Z0-9_$]*",t="([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)",r={cN:"rest_arg",b:"[.]{3}",e:n,r:10};return{aliases:["cobol"],k:{keyword:"abend abort abort-transaction abstime abstract accept access accum acquire actual add address advancing after aid alarm all allowing alphabet alphabetic alphabetic-lower alphabetic-upper alphameric alphanumeric also alter alternate and any append apply are area areas asc ascending asktime assign at attributes audit author auto auto-minimize auto-skip|10 automatic autoterminate auxiliary avg background-color beep before begin begin-transaction beginning bell between bif binary bit bits blank blink blinking blob block bold boolean-and boolean-exor boolean-not boolean-or bottom box boxed bulk-addition by calc call cancel cause ccol cd cell cells centered cf ch chain chaining change changed channel char character characters check-box cics class class-control class-id class-name cline clines clob close code code-set col collating color colour column columns combo-box comma commarea commit commitment common common-storage communication comp comp-x compressed compression computational computational-x compute condition condition-code configuration connect connection console constructor contains content continue control control-area controls conversation conversion convert converting copy copydd copying corr corresponding count create crunch csize culture currency current cursor cycle data data-base data-entry data-names database database-exception database-key database-key-long dataonly dataset date date-compiled date-time date-written db db-exception db-key dc de debug debugging decimal decimal-point declaratives declare deedit default delete deleteq delimited delimiter depart depending desc descending descriptor destination destroy detail dfld disable disconnect disk display display-ws distinct divide division dli dmca double down duplicates dynamic echo eject else empty enable enabled encryption end end-accept end-add end-call end-chain end-compute end-connect end-delete end-disconnect end-display end-divide end-enter end-evaluate end-fetch end-find end-free end-get end-if end-invoke end-lock end-modify end-move end-multiply end-obtain end-of-page end-on end-perform end-read end-receive end-return end-rewrite end-search end-sort end-start end-store end-string end-transaction end-unstring end-write end-xml endbr end-exec enter entry entry-field environment eol eop eos eq erase error escape evaluate event every examine exceeds exception exception-value exclusive exec exhibit exit extend extended-storage external failure false fd fetch field figurative-constants file file-control file-path filler final find finish first flength float font footing for foreground-color format frame free freekb freemain from function function-pointer ge generate generic get getmain giving global gn gnp go goback goto graphical greater grid group gteq gu handle having header heading highlight hold i-o icom-control id identification identified idms idms-control if ignore immediate in include index indexed indicate inherits initial initialize initiate input input-output inquire insert inspect installation interrupt interval into invalid invoke is item journal just justified keep kept key keydata keylength keys label last leading left length less license-key like limit limits linage line line-printer lines link linkage list list-box literals local-storage lock lock-holding log low lower lowlight manual map maponly mapset mass-update matches max member members memory merge message modal mode modeless modify module modules move multiple multiply myself name named namespace native negative newpage next no no-audit no-echo nodata nohandle nominal noreturn normal not note nowait number numeric numitems object object-computer obtain of off omitted on only open optional or order organization other others out output overflow overwrite owner packed-decimal padding page paging paragraph parms parse pc perform permanent pf pfkey ph pic picture pixel pixels plus pointer pop pop-up port position positioning positive prc previous printer printing prior private procedure procedure-pointer procedures proceed processing production program program-id prompt property protected protocol psb purge push push-button query queue radio-button random rba rd read readers readnext readprev readq ready real receive received record record-key recording records recordtype recovery recoverydata recreate recursive redefines reel reference references regardless relative release reload remainder remarks remote remove renames repeated replacing report reporting reports repository rerun reserve reset resp restart restricted retaining retrieval retrieve return returning reverse reverse-video reversed rewind rewrite rh ridfld right rollback rounded route row rows run run-unit run-unit-id same save schd schedule schema screen scroll sd search seconds section security segment select self send sentence separate sequence sequential server-name service set shadow shared sign signed-int signed-long signed-short size skip smaller snap sort source source-computer spaces special-names sql standard start startbr status stdcall stgid stop storage store stream string strong-name structure subfile subschema subtract success sum super suppress suspend symbol symbolic sync synchronized syncpoint system tab tab-control tabend tabget table tabopen tabput tabsort tabuild tallying tape task td temporary termid terminal terminate terminated test text than then thread through thru time timer times timestamp title to todays-date top trace tracks trailing transfer transform transid true truncated ts type typedef underline underlined union unit unlock unprotected unsigned-int unsigned-long unsigned-short unstring until up update updaters upon upper usage usage-mode use user using va value values varying version via wait when whenever where window with within words work working-storage wrap write writeq xctl xml yes",literal:"true false null undefined"},c:[e.ASM,e.QSM,e.CLCM,e.CBCM,e.CNM,{cN:"package",bK:"package",e:"{",c:[e.TM]},{cN:"class",bK:"class interface",e:"{",eE:!0,c:[{bK:"extends implements"},e.TM]},{cN:"preprocessor",bK:"import include",e:";"},{cN:"function",bK:"function",e:"[{;]",eE:!0,i:"\\S",c:[e.TM,{cN:"params",b:"\\(",e:"\\)",c:[e.ASM,e.QSM,e.CLCM,e.CBCM,r]},{cN:"type",b:":",e:t,r:10}]}],i:/#/}});
